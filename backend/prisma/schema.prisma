// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id              String  @id   @default(uuid())
  name            String  
  email           String   @unique 
  password        String
  type            String 
  job             Job[]
  applied         String[]
  userProfile     UserProfile?  
}

model UserProfile{
  id              String    @id @default(uuid())
  Phone           String?   // Changed from Int? to String? to handle phone numbers better
  expectedSalary  Float?    // Changed from Int? to Float? for more flexibility
  noticePeriod    Int?      // Kept as Int? since notice periods are typically whole numbers
  resume          String? 
  resumeHeadline  String?   @db.Text // Added @db.Text for longer text
  skills          String[]  @default([])
  project         Project[]
  Education       Education[]
  Links           Links[]
  Publications    Publications[]
  languages       languages[]
  experiences     Experience[]
  userId          String    @unique
  user            User      @relation(fields: [userId],references: [id])
}

model Project{
  id            String   @id @default(uuid())
  title         String 
  from          DateTime @default(now())
  to            DateTime @default(now())
  details       String   @db.Text
  projectLink   String   @default("")
  userId        String
  userProfile   UserProfile    @relation(fields: [userId],references: [id])    
}

model  Education{
  id              String @id  @default(uuid())
  education       String 
  specialization  String 
  institute       String 
  course          String 
  courseType      String   @default("Full-time")
  grade           Float?
  from            DateTime @default(now())
  to              DateTime @default(now())
  userId          String 
  userProfile     UserProfile  @relation(fields: [userId],references: [id])
}

model Links{
  id            String  @id  @default(uuid())
  title         String
  link          String 
  userId        String
  userProfile   UserProfile  @relation(fields: [userId],references: [id])
}

model  Publications{
  id            String   @id  @default(uuid())
  title         String
  description   String   @db.Text
  userId        String
  userProfile   UserProfile  @relation(fields: [userId],references: [id])
}

model languages{
  id            String  @id  @default(uuid())
  title         String 
  read          Boolean @default(false)
  write         Boolean @default(false)
  speak         Boolean @default(false)
  userId        String
  userProfile   UserProfile  @relation(fields: [userId],references: [id])
}

model Job{
  id                  String    @id  @default(uuid())
  title               String 
  pay                 String 
  jobtype             String[]
  shift               String
  location            String 
  benefits            String 
  appliedBy           String[]  @default([])
  shorlistCandidates  String[]  @default([])
  userId              String    @unique
  user                User      @relation(fields: [userId],references: [id])
  jobdescription      JobDescription?
}

model JobDescription{
  id                  String   @id   @default(uuid())
  description         String   @db.Text
  responsibilities    String   @db.Text
  requirements        String   @db.Text
  experience          String 
  worklocation        String 
  deadline            DateTime
  jobId               String   @unique
  job                 Job      @relation(fields: [jobId],references: [id])
}

model Experience {
  id            String   @id @default(uuid())
  title         String
  company       String
  location      String   @default("")
  description   String?  @db.Text
  startDate     DateTime @default(now())
  endDate       DateTime?
  current       Boolean  @default(false)
  userId        String
  userProfile   UserProfile @relation(fields: [userId], references: [id])
}